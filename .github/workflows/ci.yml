name: CI - Lint & Analyse

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-yaml:
    name: Lint YAML (tolérant)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint YAML (yamllint, warnings seulement)
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_file: .yamllint.yml
        continue-on-error: true # Ne bloque pas le workflow sur erreur

  lint-bash:
    name: Lint Bash scripts (tolérant)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Installer ShellCheck
        run: sudo apt-get install -y shellcheck
      - name: Lint des scripts Bash (n'échoue pas sur warning)
        run: |
          find . -type f -name '*.sh' -exec shellcheck {} + || true

  docker-compose-validate:
    name: Validation docker-compose (tolérante)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Vérifier les fichiers docker-compose (affiche un warning si erreur)
        run: |
          find . -type f -name 'docker-compose.yml' -exec sh -c 'docker-compose -f "$1" config || echo "[WARNING] Erreur dans $1"' _ {} \;

  trivy-scan:
    name: Scan sécurité Trivy (rigoureux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Scanner la configuration avec Trivy (échec si vulnérabilité)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
        # Ce scan est bloquant : le workflow échoue si des vulnérabilités sont détectées

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Installer Bats
        run: sudo apt-get install -y bats

      - name: Installer Docker Compose
        run: sudo apt-get install -y docker-compose

      - name: Lancer les tests
        run: bats tests/ 